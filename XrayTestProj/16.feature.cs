// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace XrayTestProj
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("", new string[] {
            "XRAYT0-1830"}, SourceFile="16.feature", SourceLine=1)]
    public partial class Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "16.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", null, ProgrammingLanguage.CSharp, new string[] {
                        "XRAYT0-1830"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void AddTwoPositiveNumbers(string input_1, string input_2, string button, string output, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "XRAYT0-1831"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two positive numbers", null, @__tags);
#line 6
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
  testRunner.Given(string.Format("I have entered {0} into the calculator", input_1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
  testRunner.And(string.Format("I have also entered {0} into the calculator", input_2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
  testRunner.When(string.Format("I press {0}", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
  testRunner.Then(string.Format("the result should be {0} on the screen", output), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two positive numbers, 20", new string[] {
                "XRAYT0-1831"}, SourceLine=13)]
        public virtual void AddTwoPositiveNumbers_20()
        {
#line 6
 this.AddTwoPositiveNumbers("20", "30", "add", "50", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two positive numbers, 2", new string[] {
                "XRAYT0-1831"}, SourceLine=13)]
        public virtual void AddTwoPositiveNumbers_2()
        {
#line 6
 this.AddTwoPositiveNumbers("2", "5", "add", "7", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two positive numbers, 0", new string[] {
                "XRAYT0-1831"}, SourceLine=13)]
        public virtual void AddTwoPositiveNumbers_0()
        {
#line 6
 this.AddTwoPositiveNumbers("0", "40", "add", "40", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two positive numbers, 4", new string[] {
                "XRAYT0-1831"}, SourceLine=13)]
        public virtual void AddTwoPositiveNumbers_4()
        {
#line 6
 this.AddTwoPositiveNumbers("4", "50", "add", "54", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Add two positive numbers, 5", new string[] {
                "XRAYT0-1831"}, SourceLine=13)]
        public virtual void AddTwoPositiveNumbers_5()
        {
#line 6
 this.AddTwoPositiveNumbers("5", "50", "add", "55", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("add two numbers", new string[] {
                "XRAYT0-1832"}, SourceLine=21)]
        public virtual void AddTwoNumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("add two numbers", null, new string[] {
                        "XRAYT0-1832"});
#line 22
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 23
  testRunner.Given("I have entered 50 into the calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
  testRunner.And("I have also entered 70 into the calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
  testRunner.When("I press add", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
  testRunner.Then("the result should be 120 on the screen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AddTwoNegativeNumbers(string input_1, string input_2, string button, string output, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "XRAYT0-1833"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("add two negative numbers", null, @__tags);
#line 30
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 31
  testRunner.Given(string.Format("I have entered {0} into the calculator", input_1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
  testRunner.And(string.Format("I have also entered {0} into the calculator", input_2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
  testRunner.When(string.Format("I press {0}", button), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
  testRunner.Then(string.Format("the result should be {0} on the screen", output), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("add two negative numbers, Variant 0", new string[] {
                "XRAYT0-1833"}, SourceLine=37)]
        public virtual void AddTwoNegativeNumbers_Variant0()
        {
#line 30
 this.AddTwoNegativeNumbers("-1", "-2", "add", "-3", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("add two negative numbers, Variant 1", new string[] {
                "XRAYT0-1833"}, SourceLine=37)]
        public virtual void AddTwoNegativeNumbers_Variant1()
        {
#line 30
 this.AddTwoNegativeNumbers("1", "-1", "add", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
